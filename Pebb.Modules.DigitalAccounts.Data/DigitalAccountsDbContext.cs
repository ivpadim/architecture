


//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
#pragma warning disable 1573

using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using Pebb.Modules.DigitalAccounts.Entities;
using Pebb.Modules.DigitalAccounts.Data.Mappings;

namespace Pebb.Modules.DigitalAccounts.Data
{	
     public interface IDigitalAccountsDbContext : IQueryableUnitOfWork 
     { 
		    IDbSet<Banco> Bancos { get; set; }	
		    IDbSet<Beneficiario> Beneficiarios { get; set; }	
		    IDbSet<BeneficiarioCuenta> BeneficiarioCuentas { get; set; }	
		    IDbSet<Cuenta> Cuentas { get; set; }	
		    IDbSet<CuentaAlia> CuentaAlias { get; set; }	
		    IDbSet<EstadoCuenta> EstadoCuentas { get; set; }	
		    IDbSet<Movimiento> Movimientos { get; set; }	
		    IDbSet<Producto> Productos { get; set; }	
		    IDbSet<Traspaso> Traspasos { get; set; }	
		    IDbSet<TraspasoTercero> TraspasoTerceros { get; set; }	
     }

	public partial class DigitalAccountsDbContext : DbContext, IDigitalAccountsDbContext
	{
		
        #region Constructors
		static DigitalAccountsDbContext()
		{
			Database.SetInitializer<DigitalAccountsDbContext>(null);
		}
		public DigitalAccountsDbContext() : base("DigitalAccountsUnitOfWork")
		{		
		    this.Configuration.ProxyCreationEnabled = false;
		}
		public DigitalAccountsDbContext(string nameOrConnectionString) : base(nameOrConnectionString)
		{		
		
		}

		public DigitalAccountsDbContext(string nameOrConnectionString, DbCompiledModel model) : base(nameOrConnectionString, model)
		{
		}

		public DigitalAccountsDbContext(DbConnection existingConnection, bool contextOwnsConnection) : base(existingConnection, contextOwnsConnection)
		{
		}

		public DigitalAccountsDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection) : base(existingConnection, model, contextOwnsConnection)
		{
		}
		#endregion
		
        #region Metadata mapping
		protected override void OnModelCreating (DbModelBuilder modelBuilder)
		{   
			modelBuilder.Conventions.Remove<IncludeMetadataConvention>();		
			modelBuilder.Configurations.Add(new BancoMapping());			
			modelBuilder.Configurations.Add(new BeneficiarioMapping());			
			modelBuilder.Configurations.Add(new BeneficiarioCuentaMapping());			
			modelBuilder.Configurations.Add(new CuentaMapping());			
			modelBuilder.Configurations.Add(new CuentaAliaMapping());			
			modelBuilder.Configurations.Add(new EstadoCuentaMapping());			
			modelBuilder.Configurations.Add(new MovimientoMapping());			
			modelBuilder.Configurations.Add(new ProductoMapping());			
			modelBuilder.Configurations.Add(new TraspasoMapping());			
			modelBuilder.Configurations.Add(new TraspasoTerceroMapping());			
		}
		#endregion
        
        #region Methods
        public virtual void Commit()
        {
            base.SaveChanges();
        }
        #endregion

		#region Properties
		public DbSet<Banco> Bancos { get; set; }	
		public DbSet<Beneficiario> Beneficiarios { get; set; }	
		public DbSet<BeneficiarioCuenta> BeneficiarioCuentas { get; set; }	
		public DbSet<Cuenta> Cuentas { get; set; }	
		public DbSet<CuentaAlia> CuentaAlias { get; set; }	
		public DbSet<EstadoCuenta> EstadoCuentas { get; set; }	
		public DbSet<Movimiento> Movimientos { get; set; }	
		public DbSet<Producto> Productos { get; set; }	
		public DbSet<Traspaso> Traspasos { get; set; }	
		public DbSet<TraspasoTercero> TraspasoTerceros { get; set; }	
		
        #endregion

       #region IQueryableUnitOfWork Members

        public IDbSet<T> CreateSet<T>()
            where T : class
        {
            return base.Set<T>();
        }

        public void Attach<T>(T item)
            where T : class
        {
            //attach and set as unchanged
            base.Entry<T>(item).State = System.Data.EntityState.Unchanged;
        }

        public void SetModified<T>(T item)
            where T : class
        {
            //this operation also attach item in object state manager
            base.Entry<T>(item).State = System.Data.EntityState.Modified;
        }
        public void ApplyCurrentValues<T>(T original, T current)
            where T : class
        {
            //if not is attached, attach original and set current values
            base.Entry<T>(original).CurrentValues.SetValues(current);
        }

        #endregion
	}
	

           
}
