@**********************************************************
   This code is licensed under the Microsoft Public License.
   THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
   ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
   IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
   PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
**********************************************************@
@using System
@using System.Linq
@using FlexibleEF.Generator

@inherits RazorTemplate	  
@{
	var tables = (IEnumerable<Table>)Model.Tables;
	var dataContextSettings = (DbContextSettings)Model.DataContextSetting;
	var connectionSettings = (ConnectionSettings)Model.ConnectionSettings;
	
	var partialKeyword = dataContextSettings.GeneratePartial ? " partial" : "";
	string connectionNameInContructor = dataContextSettings.GenerateConstructorWithConnectionName && !string.IsNullOrWhiteSpace(connectionSettings.Name) 
											? "\"{0}\"".FormatS(connectionSettings.Name) 
											: "";
    string entitiesNamespace = string.Empty;
    if(!string.IsNullOrEmpty(dataContextSettings.EntitiesNamespace))
    {
        var namespaces = dataContextSettings.EntitiesNamespace.Split(';').ToList();
        foreach (var ns in namespaces)
        {
            entitiesNamespace += string.Format("using {0};{1}", ns, Environment.NewLine);
        }
    }
}
@functions
{
    private string Normalize(string str)
    {
        return CorrectPluralization(RemoveForeignTags(str));
    }

    private string RemoveForeignTags(string str)
    {
        return str.Replace("_BackReference", "")
                         .Replace("fk", "");
    }

    private string CorrectPluralization(string str)
    {
        if (str.EndsWith("oes"))
            return str.Substring(0, str.Length - 3) + "os";

        if (str.EndsWith("ns"))
            return str.Substring(0, str.Length - 2) + "nes";

        return str;
    }
}
//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
#pragma warning disable 1573

using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
@entitiesNamespace
namespace @dataContextSettings.Namespace
{	
     public interface I@(dataContextSettings.ClassName) : IQueryableUnitOfWork 
     { 
     @foreach (var table in tables)
     {   
	    if (!dataContextSettings.GetterOnlyProperties)
	    {
		    @:DbSet<@table.ClassName> @Normalize(table.DbContextPropertyName) { get; set; }	
	    }
        else
        {
		    @:DbSet<@table.ClassName> @Normalize(table.DbContextPropertyName) { get { return Set<@table.ClassName>(); } }
	    }
     }
     }

	public@(partialKeyword) class @dataContextSettings.ClassName : @dataContextSettings.BaseClassName.CaseIsEmpty("DbContext"), I@(dataContextSettings.ClassName)
	{
		
        #region Constructors
		static @(dataContextSettings.ClassName)()
		{
			Database.SetInitializer<@dataContextSettings.ClassName>(null);
		}
		public @(dataContextSettings.ClassName)() : base(@connectionNameInContructor)
		{		
		    this.Configuration.ProxyCreationEnabled = false;
		}
		public @(dataContextSettings.ClassName)(string nameOrConnectionString) : base(nameOrConnectionString)
		{		
		
		}

		public @(dataContextSettings.ClassName)(string nameOrConnectionString, DbCompiledModel model) : base(nameOrConnectionString, model)
		{
		}

		public @(dataContextSettings.ClassName)(DbConnection existingConnection, bool contextOwnsConnection) : base(existingConnection, contextOwnsConnection)
		{
		}

		public @(dataContextSettings.ClassName)(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection) : base(existingConnection, model, contextOwnsConnection)
		{
		}
		#endregion
		
        #region Metadata mapping
		protected override void OnModelCreating (DbModelBuilder modelBuilder)
		{   
			modelBuilder.Conventions.Remove<IncludeMetadataConvention>();		
		@foreach (var table in tables)
  {
			@:modelBuilder.Configurations.Add(new @(table.ClassName)Mapping());			
		}					
		}
		#endregion
        
        #region Methods
        public virtual void Commit()
        {
            base.SaveChanges();
        }
        #endregion

		#region Properties

@{
    var dbSetType = dataContextSettings.UseDbSetInterface ? "IDbSet" : "DbSet";
}
@foreach (var table in tables)
{
    if (!dataContextSettings.GetterOnlyProperties)
    {
		@:public @dbSetType<@table.ClassName> @Normalize(table.DbContextPropertyName) { get; set; }	
	}
    else
    {
		@:public @dbSetType<@table.ClassName> @Normalize(table.DbContextPropertyName) { get { return Set<@table.ClassName>(); } }
	}
		
}	  		
		
        #endregion

       #region IQueryableUnitOfWork Members

        public IDbSet<T> CreateSet<T>()
            where T : class
        {
            return base.Set<T>();
        }

        public void Attach<T>(T item)
            where T : class
        {
            //attach and set as unchanged
            base.Entry<T>(item).State = System.Data.EntityState.Unchanged;
        }

        public void SetModified<T>(T item)
            where T : class
        {
            //this operation also attach item in object state manager
            base.Entry<T>(item).State = System.Data.EntityState.Modified;
        }
        public void ApplyCurrentValues<T>(T original, T current)
            where T : class
        {
            //if not is attached, attach original and set current values
            base.Entry<T>(original).CurrentValues.SetValues(current);
        }

        #endregion
	}
	

           
}
