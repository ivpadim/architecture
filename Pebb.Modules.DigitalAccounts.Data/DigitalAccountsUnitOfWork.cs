


//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
#pragma warning disable 1573

using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using Pebb.Infrastructure.Data;
using Pebb.Modules.DigitalAccounts.Entities;
using Pebb.Modules.DigitalAccounts.Data.Mappings;

namespace Pebb.Modules.DigitalAccounts.Data
{
    public interface IDigitalAccountsUnitOfWork : IQueryableUnitOfWork
    {
        DbSet<Cuenta> Cuentas { get; set; }
        DbSet<EstadoCuenta> EstadosDeCuenta { get; set; }
        DbSet<Movimiento> Movimientos { get; set; }
        DbSet<Producto> Productos { get; set; }
    }

    public partial class DigitalAccountsUnitOfWork : DbContext, IDigitalAccountsUnitOfWork
    {

        #region Constructors
        static DigitalAccountsUnitOfWork()
        {
            //Database.SetInitializer<DigitalAccountsUnitOfWork>(null);            
            Database.SetInitializer<DigitalAccountsUnitOfWork>(new CreateDatabaseIfNotExists<DigitalAccountsUnitOfWork>());
        }
        public DigitalAccountsUnitOfWork()
            : base("DigitalAccountsUnitOfWork")
        {
            this.Configuration.ProxyCreationEnabled = false;
        }
        public DigitalAccountsUnitOfWork(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {

        }

        public DigitalAccountsUnitOfWork(string nameOrConnectionString, DbCompiledModel model)
            : base(nameOrConnectionString, model)
        {
        }

        public DigitalAccountsUnitOfWork(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public DigitalAccountsUnitOfWork(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }
        #endregion

        #region Metadata mapping
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            //modelBuilder.Conventions.Remove<IncludeMetadataConvention>();		
            modelBuilder.Configurations.Add(new CuentaMapping());
            modelBuilder.Configurations.Add(new EstadoCuentaMapping());
            modelBuilder.Configurations.Add(new MovimientoMapping());
            modelBuilder.Configurations.Add(new ProductoMapping());
        }
        #endregion

        #region Methods
        public virtual void Commit()
        {
            base.SaveChanges();
        }
        #endregion

        #region Properties

        public DbSet<Cuenta> Cuentas { get; set; }
        public DbSet<EstadoCuenta> EstadosDeCuenta { get; set; }
        public DbSet<Movimiento> Movimientos { get; set; }
        public DbSet<Producto> Productos { get; set; }

        #endregion

        #region IQueryableUnitOfWork Members

        public IDbSet<T> CreateSet<T>()
            where T : class
        {
            return base.Set<T>();
        }

        public void Attach<T>(T item)
            where T : class
        {
            //attach and set as unchanged
            base.Entry<T>(item).State = System.Data.EntityState.Unchanged;
        }

        public void SetModified<T>(T item)
            where T : class
        {
            //this operation also attach item in object state manager
            base.Entry<T>(item).State = System.Data.EntityState.Modified;
        }
        public void ApplyCurrentValues<T>(T original, T current)
            where T : class
        {
            //if not is attached, attach original and set current values
            base.Entry<T>(original).CurrentValues.SetValues(current);
        }

        #endregion
    }



}
